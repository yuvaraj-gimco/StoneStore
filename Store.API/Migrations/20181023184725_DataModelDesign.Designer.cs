// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.API.Models;

namespace Store.API.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    [Migration("20181023184725_DataModelDesign")]
    partial class DataModelDesign
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Store.API.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("ExtraAttribute");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Store.API.Models.Composition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Title");

                    b.Property<string>("UpDatedBy");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Composition");
                });

            modelBuilder.Entity("Store.API.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Store.API.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("COAId");

                    b.Property<string>("Company");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Email");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsIos");

                    b.Property<bool>("IsUpdated");

                    b.Property<string>("LastName");

                    b.Property<string>("LookingFor");

                    b.Property<string>("Password");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Photo");

                    b.Property<long>("RewardPoints");

                    b.Property<string>("Role");

                    b.Property<long>("SalesPersonId");

                    b.Property<long>("SqftsSold");

                    b.Property<string>("State");

                    b.Property<string>("Token");

                    b.Property<string>("UId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Store.API.Models.Employee", b =>
                {
                    b.Property<long>("SalesExecutiveId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("Company");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsIos");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Photo");

                    b.Property<string>("Role");

                    b.Property<string>("State");

                    b.Property<string>("Token");

                    b.Property<string>("UId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("ZipCode");

                    b.HasKey("SalesExecutiveId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Store.API.Models.Finishing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Finishing");
                });

            modelBuilder.Entity("Store.API.Models.Lot", b =>
                {
                    b.Property<long>("LotId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryCode");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("Identity");

                    b.Property<string>("Images");

                    b.Property<DateTime>("InWardDate");

                    b.Property<long>("Length");

                    b.Property<long>("Likes");

                    b.Property<long?>("MaterialsId");

                    b.Property<long>("MeterialId");

                    b.Property<long>("OneSlabSqfts");

                    b.Property<long>("PricePerSqft");

                    b.Property<string>("ProfileImage");

                    b.Property<bool>("Promotional");

                    b.Property<string>("QRCode");

                    b.Property<long>("Quantity");

                    b.Property<long>("QuarryCode");

                    b.Property<string>("Recommended");

                    b.Property<double>("RewardPointMultiplier");

                    b.Property<string>("SellingCategory");

                    b.Property<long>("Status");

                    b.Property<long>("Thickness");

                    b.Property<long>("TotalSqfts");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("Width");

                    b.Property<bool>("isFeatured");

                    b.Property<bool>("isPopular");

                    b.Property<bool>("isPromotional");

                    b.HasKey("LotId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Store.API.Models.LotAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("LotId");

                    b.Property<long>("LotStatusId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("LotStatusId");

                    b.ToTable("LotAudit");
                });

            modelBuilder.Entity("Store.API.Models.LotStatus", b =>
                {
                    b.Property<long>("LotStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("LotStatusId");

                    b.ToTable("LotStatus");
                });

            modelBuilder.Entity("Store.API.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ColorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("Name");

                    b.Property<string>("ReferenceImage");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Store.API.Models.MaterialQuality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Quality");

                    b.Property<DateTime>("UpadatedAt");

                    b.Property<string>("UpadatedBy");

                    b.HasKey("Id");

                    b.ToTable("MaterialQuality");
                });

            modelBuilder.Entity("Store.API.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CustomerId");

                    b.Property<DateTime>("DueDate");

                    b.Property<long>("EmployeeId");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("ExternalFiles");

                    b.Property<long>("OrderCost");

                    b.Property<long>("ServiceTax");

                    b.Property<string>("ShippingAddress1");

                    b.Property<string>("ShippingAddress2");

                    b.Property<long>("ShippingCharges");

                    b.Property<string>("State");

                    b.Property<string>("Status");

                    b.Property<long>("TotalCost");

                    b.Property<long>("TotalSqfts");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("ZipCode");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Store.API.Models.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CostOfProduct");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<long>("LotId");

                    b.Property<long>("OrderId");

                    b.Property<long>("Quantity");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Store.API.Models.Quotation", b =>
                {
                    b.Property<long>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<string>("Status");

                    b.Property<long>("TotalSqftsReq");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("QuoteId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Store.API.Models.QuotationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("ExtendedAttribute");

                    b.Property<long>("LotId");

                    b.Property<long>("QuoteId");

                    b.Property<string>("Requirement");

                    b.Property<long>("SqftRequired");

                    b.Property<long>("Thickness");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuotationDetails");
                });

            modelBuilder.Entity("Store.API.Models.Slab", b =>
                {
                    b.Property<long>("SlabId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<string>("ExternalAttribute");

                    b.Property<string>("Image");

                    b.Property<string>("ImageName");

                    b.Property<long>("Length");

                    b.Property<long>("LotId");

                    b.Property<long?>("OrderDetailId");

                    b.Property<long?>("OrderDetailsId");

                    b.Property<string>("Shape");

                    b.Property<string>("SlabIdentity");

                    b.Property<long>("SlabShapeId");

                    b.Property<long>("SlabSqfts");

                    b.Property<long>("SlabStatusId");

                    b.Property<long>("Thickness");

                    b.Property<string>("ThumbImage");

                    b.Property<long>("Width");

                    b.HasKey("SlabId");

                    b.HasIndex("LotId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("SlabShapeId");

                    b.ToTable("Slabs");
                });

            modelBuilder.Entity("Store.API.Models.SlabShape", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Shape");

                    b.Property<long>("SlabId");

                    b.Property<DateTime>("UpadatedAt");

                    b.Property<string>("UpadatedBy");

                    b.HasKey("Id");

                    b.ToTable("SlabShape");
                });

            modelBuilder.Entity("Store.API.Models.SlabStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("SlabStatus");
                });

            modelBuilder.Entity("Store.API.Models.SlabThickness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("Thickness");

                    b.Property<DateTime>("UpadatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("SlabThickness");
                });

            modelBuilder.Entity("Store.API.Models.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPersonLandLine");

                    b.Property<long>("ContactPersonMobileNumber");

                    b.Property<string>("ContactPersonName");

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("SupplierAddress1");

                    b.Property<string>("SupplierAddress2");

                    b.Property<string>("SupplierCode");

                    b.Property<long>("SupplierMobile");

                    b.Property<string>("SupplierName");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Store.API.Models.Lot", b =>
                {
                    b.HasOne("Store.API.Models.Material", "Materials")
                        .WithMany("Lots")
                        .HasForeignKey("MaterialsId");
                });

            modelBuilder.Entity("Store.API.Models.LotAudit", b =>
                {
                    b.HasOne("Store.API.Models.LotStatus", "LotStatus")
                        .WithMany()
                        .HasForeignKey("LotStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.Material", b =>
                {
                    b.HasOne("Store.API.Models.Color", "Color")
                        .WithMany("Materials")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.Order", b =>
                {
                    b.HasOne("Store.API.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.API.Models.Employee", "Employee")
                        .WithMany("Order")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.OrderDetail", b =>
                {
                    b.HasOne("Store.API.Models.Lot", "Lots")
                        .WithMany("OrderDetails")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.API.Models.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.Quotation", b =>
                {
                    b.HasOne("Store.API.Models.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.QuotationDetail", b =>
                {
                    b.HasOne("Store.API.Models.Lot", "Lot")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.API.Models.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.API.Models.Slab", b =>
                {
                    b.HasOne("Store.API.Models.Lot", "Lot")
                        .WithMany("Slabs")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Store.API.Models.OrderDetail", "OrderDetail")
                        .WithMany("Slabs")
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("Store.API.Models.SlabShape", "SlabShape")
                        .WithMany()
                        .HasForeignKey("SlabShapeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
